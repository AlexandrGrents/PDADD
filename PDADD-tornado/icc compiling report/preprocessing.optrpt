
Begin optimization report for: zNorm(float *, float **, int, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at preprocessing.cpp(8,2)
<Peeled>
LOOP END

LOOP BEGIN at preprocessing.cpp(8,2)
   remark #15388: vectorization support: reference t has aligned access   [ preprocessing.cpp(10,3) ]
   remark #15388: vectorization support: reference t has aligned access   [ preprocessing.cpp(11,3) ]
   remark #15388: vectorization support: reference t has aligned access   [ preprocessing.cpp(11,3) ]
   remark #15399: vectorization support: unroll factor set to 2
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ preprocessing.cpp(6,13) ]
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ preprocessing.cpp(7,16) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15442: entire loop may be executed in remainder
   remark #15448: unmasked aligned unit stride loads: 1 
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 20 
   remark #15477: vector loop cost: 6.750 
   remark #15478: estimated potential speedup: 2.790 
   remark #15479: lightweight vector operations: 13 
   remark #15480: medium-overhead vector operations: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at preprocessing.cpp(8,2)
<Remainder>
LOOP END

LOOP BEGIN at preprocessing.cpp(20,2)
   remark #15389: vectorization support: reference S has unaligned access   [ preprocessing.cpp(22,3) ]
   remark #15389: vectorization support: reference t has unaligned access   [ preprocessing.cpp(22,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15399: vectorization support: unroll factor set to 4
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ preprocessing.cpp(22,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ preprocessing.cpp(22,3) ]
   remark #15300: LOOP WAS VECTORIZED
   remark #15475: --- begin vector loop cost summary ---
   remark #15476: scalar loop cost: 42 
   remark #15477: vector loop cost: 20.000 
   remark #15478: estimated potential speedup: 2.060 
   remark #15479: lightweight vector operations: 8 
   remark #15481: heavy-overhead vector operations: 1 
   remark #15487: type converts: 2 
   remark #15488: --- end vector loop cost summary ---
LOOP END

LOOP BEGIN at preprocessing.cpp(20,2)
<Remainder>
   remark #15389: vectorization support: reference S has unaligned access   [ preprocessing.cpp(22,3) ]
   remark #15389: vectorization support: reference t has unaligned access   [ preprocessing.cpp(22,3) ]
   remark #15381: vectorization support: unaligned access used inside loop body
   remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ preprocessing.cpp(22,3) ]
   remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ preprocessing.cpp(22,3) ]
   remark #15301: REMAINDER LOOP WAS VECTORIZED
LOOP END

LOOP BEGIN at preprocessing.cpp(20,2)
<Remainder>
LOOP END
===========================================================================

Begin optimization report for: fill_S(float *, float **, int, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at preprocessing.cpp(27,2)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at preprocessing.cpp(8,2) inlined into preprocessing.cpp(29,3)
   <Peeled>
   LOOP END

   LOOP BEGIN at preprocessing.cpp(8,2) inlined into preprocessing.cpp(29,3)
      remark #15388: vectorization support: reference t has aligned access   [ preprocessing.cpp(10,3) ]
      remark #15388: vectorization support: reference t has aligned access   [ preprocessing.cpp(11,3) ]
      remark #15388: vectorization support: reference t has aligned access   [ preprocessing.cpp(11,3) ]
      remark #15399: vectorization support: unroll factor set to 2
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ preprocessing.cpp(6,13) ]
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ preprocessing.cpp(7,16) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15448: unmasked aligned unit stride loads: 1 
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 20 
      remark #15477: vector loop cost: 6.750 
      remark #15478: estimated potential speedup: 2.790 
      remark #15479: lightweight vector operations: 13 
      remark #15480: medium-overhead vector operations: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at preprocessing.cpp(8,2) inlined into preprocessing.cpp(29,3)
   <Remainder>
   LOOP END

   LOOP BEGIN at preprocessing.cpp(20,2) inlined into preprocessing.cpp(29,3)
      remark #15389: vectorization support: reference S has unaligned access   [ preprocessing.cpp(22,3) ]
      remark #15389: vectorization support: reference t has unaligned access   [ preprocessing.cpp(22,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15399: vectorization support: unroll factor set to 4
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ preprocessing.cpp(22,3) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ preprocessing.cpp(22,3) ]
      remark #15300: LOOP WAS VECTORIZED
      remark #15475: --- begin vector loop cost summary ---
      remark #15476: scalar loop cost: 42 
      remark #15477: vector loop cost: 20.000 
      remark #15478: estimated potential speedup: 2.060 
      remark #15479: lightweight vector operations: 8 
      remark #15481: heavy-overhead vector operations: 1 
      remark #15487: type converts: 2 
      remark #15488: --- end vector loop cost summary ---
   LOOP END

   LOOP BEGIN at preprocessing.cpp(20,2) inlined into preprocessing.cpp(29,3)
   <Remainder>
      remark #15389: vectorization support: reference S has unaligned access   [ preprocessing.cpp(22,3) ]
      remark #15389: vectorization support: reference t has unaligned access   [ preprocessing.cpp(22,3) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15417: vectorization support: number of FP up converts: single precision to double precision 1   [ preprocessing.cpp(22,3) ]
      remark #15418: vectorization support: number of FP down converts: double precision to single precision 1   [ preprocessing.cpp(22,3) ]
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END

   LOOP BEGIN at preprocessing.cpp(20,2) inlined into preprocessing.cpp(29,3)
   <Remainder>
   LOOP END
LOOP END
===========================================================================

Begin optimization report for: fill_u_and_q(float *, float **, int, int)

    Report from: Loop nest & Vector optimizations [loop, vec]


LOOP BEGIN at preprocessing.cpp(36,2)
   remark #25096: Loop Interchange not done due to: Imperfect Loop Nest (Either at Source or due to other Compiler Transformations)
   remark #25451: Advice: Loop Interchange, if possible, might help loopnest. Suggested Permutation: ( 1 2 ) --> ( 2 1 ) 
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed OUTPUT dependence between u_and_q line 38 and u_and_q line 46
   remark #15346: vector dependence: assumed OUTPUT dependence between u_and_q line 46 and u_and_q line 38

   LOOP BEGIN at preprocessing.cpp(40,3)
      remark #15344: loop was not vectorized: vector dependence prevents vectorization
      remark #15346: vector dependence: assumed FLOW dependence between u_and_q line 42 and t line 43
      remark #15346: vector dependence: assumed ANTI dependence between t line 43 and u_and_q line 42
      remark #25439: unrolled with remainder by 2  
   LOOP END

   LOOP BEGIN at preprocessing.cpp(40,3)
   <Remainder>
   LOOP END
LOOP END
===========================================================================
