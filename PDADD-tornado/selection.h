/*
	Александр Гренц (2019 г)
	Версия параллельного алгоритма поиска диссонансов во временном ряде PDADD для 1 узла с 1 ядром - модуль фазы поиска диссонансов
	Предназначен для нахождения кандидатов в диссонасы.

	Функции:
		findCandidats - предназначена для параллельного поиска кандидатов в диссонансы
		getCandidats - предназначена для формирования списка кандидатов, который далее используется в фазе уточнения
		get_C - предназначена для формирования матрицы кандидатов
		selection - предназначена для реализации фазы поиска диссонансов. Выполняет подготовку данных для параллельного поиска, параллельный поиск, 
			формирование данных на выходе параллельного поиска, подготовку данных для следующей фазы 
*/
#include <malloc.h>
#include "ED.h"

#include <stdio.h>

const int NIL = -1;
/*
findCandidats
	Предназначена для параллельного поиска кандидатов в диссонансы
	Входные данные: матрица подпоследовательностей S, диапазон определения диссонанса r, указатель для записи информации о кандидатах I, 
		вспомогательные структуры для быстрой вставки Insert, Bottom, Count 
	Выходные данные: индексы кандидатов, найденных каждой нитью (матрица I)
*/
void findCandidats(float **S, float r, int N, int n, int L, int p, int **I, int *Insert, int *Bottom, int *Count);

/*
getCandidats
	Предназначена для формирования списка кандидатов, который далее используется в фазе уточнения.
	Входные данные: индексы кандидатов, найденных каждой нитью (матрица I)
	Выходные данные: индексы всех найденных кандидатов (массив Candidats)
*/
void getCandidats(int **I, int *Candidats, int *Bottom, int *Count, int L, int p, int *H);

/*
get_C
	Предназначена для формирования матрицы кандидатов
	Входные данные: матрица подпоследовательностей S, индексы строк-кандидатов Candidats, указатель для записи матрицы кандидатов C
	Выходные данные: записанные в матрицу C строки-кандидаты из матрицы S
*/
void get_C(float **S, float **C, int *Candidats, int *H, int n);

/*
selection
	Предназначена для выполнения фазы поиска кандидатов
	Входные данные: матрица подпоследовательностей S, указатель для записи матрицы кандидатов C, указатель для записи списка кандидатов Candidats, 
		диапазон определения диссонанса r, количество нитей p
	Выходные данные: записанные в массив Candidats кандидаты в диссонансы и записанные в матрицу C соответствующие им строки-кандидаты
*/
void selection(float **S, float **C, float r, int N, int n, int L, int p, int *H, int *Candidats);
